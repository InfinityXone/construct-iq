services:
  db:
    image: postgres:15
    restart: unless-stopped
    env_file: ../.env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ../infra/postgres-init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 30

  redis:
    image: redis:7
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 30

  minio:
    image: minio/minio:latest
    restart: unless-stopped
    env_file: ../.env
    command: ["server", "/data", "--console-address", ":9001"]
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 5s
      timeout: 3s
      retries: 60

  minio-setup:
    image: minio/mc:latest
    restart: on-failure
    env_file: ../.env
    depends_on:
      minio:
        condition: service_healthy
    command:
      - sh
      - -lc
      - >
        mc alias set local http://minio:9000 "$MINIO_ROOT_USER" "$MINIO_ROOT_PASSWORD"
        && mc mb --ignore-existing "local/$MINIO_BUCKET"
        && echo "Bucket '$MINIO_BUCKET' ready"

  api:
    image: python:3.11-slim
    restart: unless-stopped
    env_file: ../.env
    working_dir: /app
    volumes:
      - ../api:/app
    command: bash -lc "pip install -q -r /app/requirements.txt && uvicorn app.main:app --host 0.0.0.0 --port 8080"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio-setup:
        condition: service_started
    ports:
      - "8080:8080"

  worker:
    image: python:3.11-slim
    restart: unless-stopped
    env_file: ../.env
    working_dir: /app
    volumes:
      - ../api:/app
      - ../worker:/worker
    command: bash -lc "pip install -q -r /app/requirements.txt && python -u /worker/worker.py"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  harvester:
    image: python:3.11-slim
    restart: unless-stopped
    env_file: ../.env
    working_dir: /app
    volumes:
      - ../api:/app
    # command overridden by docker-compose.override.yml
    command: bash -lc "pip install -q -r /app/requirements.txt && python -u /app/harvest/gsa_calc_rates.py --pages ${CALC_PAGES:-5}"
    depends_on:
      db:
        condition: service_healthy

volumes:
  pgdata:
  minio:
